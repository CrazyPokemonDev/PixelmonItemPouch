buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://repo.spongepowered.org/maven" }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'

version = mod_version
group = mod_group
archivesBaseName = mod_id

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: mappings_channel, version: mappings_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    accessTransformer = file('libs/pixelmon_at.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.coreMods.load', mod_core_plugin.replace('${mod_group}', mod_group).replace('${mod_id}', mod_id)
            property 'mixin.debug.countInjections', 'true'
        }

        server {
            property 'fml.coreMods.load', mod_core_plugin.replace('${mod_group}', mod_group).replace('${mod_id}', mod_id)
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.debug.countInjections', 'true'
        }
    }
}

repositories {
    maven { url = 'https://repo.spongepowered.org/maven' }
}

configurations {
    embed
    compile.extendsFrom(embed)
}

repositories {
    flatDir {
        dir 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    embed('org.spongepowered:mixin:0.8.3-SNAPSHOT') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }

    compile name: 'PixelmonGenerations-1.12.2-8.7.1'
    compile name: 'LypakaUtils-0.0.2'
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", minecraft_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'mod_id': mod_id, 'mod_name': mod_name, 'version': project.version,
                'mcversion': minecraft_version, 'mod_description': mod_description,
                'mod_author': mod_author
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

mixin {
    add sourceSets.main, mod_mixin_refmap.replace('${mod_id}', mod_id)
}

jar {
    from {
        configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "LICENSE.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
    }

    manifest {
        attributes "FMLCorePlugin": mod_core_plugin.replace('${mod_group}', mod_group).replace('${mod_id}', mod_id)
        attributes "FMLCorePluginContainsFMLMod": "false"
        attributes "ForceLoadAsMod": "true"
        attributes "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
        attributes "TweakOrder": "0"
        attributes "MixinConfigs": mod_mixin_configs.replace('${mod_id}', mod_id)
        attributes([
                "Specification-Title": "{mod_id}",
                "Specification-Vendor": "crazypokemondev",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"crazypokemondev",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.create("copyResourceToClasses", Copy.class) {
    tasks.classes.dependsOn(it)
    dependsOn(tasks.processResources)
    onlyIf { gradle.taskGraph.hasTask(tasks.prepareRuns) }

    into("$buildDir/classes/java/main")
    // if you write @Mod class in kotlin, please use code below
    // into("$buildDir/classes/kotlin/main")
    from(tasks.processResources.destinationDir)
}

task genDevSources(type: Copy) {
    tasks.compileJava.dependsOn(it)
    onlyIf { gradle.taskGraph.hasTask(tasks.prepareRuns) }

    outputs.upToDateWhen { false }

    from "$rootDir/src/main/java/de/crazypokemondev/pixelmongenerations/pouch/mixin"
    into "$buildDir/generated-src/de/crazypokemondev/pixelmongenerations/pouch/mixin"
    filter {
        line -> line
                .replaceAll('field_71071_by', 'inventory')
                .replaceAll('func_77973_b', 'getItem')
                .replaceAll('func_174925_a', 'clearMatchingItems')
    }
}

task genProdSources(type: Copy) {
    tasks.compileJava.dependsOn(it)
    onlyIf { !gradle.taskGraph.hasTask(tasks.prepareRuns) }

    outputs.upToDateWhen { false }

    from "$rootDir/src/main/java/de/crazypokemondev/pixelmongenerations/pouch/mixin"
    into "$buildDir/generated-src/de/crazypokemondev/pixelmongenerations/pouch/mixin"
}

compileJava.doLast {
    delete "$buildDir/generated-src"
}

sourceSets {
    main {
        java {
            exclude "de/crazypokemondev/pixelmongenerations/pouch/mixin"
        }
        java{
            srcDir "$buildDir/generated-src/de/crazypokemondev/pixelmongenerations/pouch/mixin"
        }
    }
}

jar.finalizedBy('reobfJar')
